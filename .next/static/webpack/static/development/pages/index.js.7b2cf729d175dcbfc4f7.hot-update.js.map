{"version":3,"file":"static/webpack/static/development/pages/index.js.7b2cf729d175dcbfc4f7.hot-update.js","sources":["webpack:///./components/hero/contact/index.js"],"sourcesContent":["import React from 'react';\nimport * as EmailValidator from 'email-validator';\nimport PhoneValidator from 'phone';\nimport FormInput from './FormInput';\nimport FormMessaging from './FormMessaging';\nimport postContactForm from '../../../bin/postContactForm';\nimport M from '../../../bin/materializeLoader';\n\nclass Contact extends React.Component {\n  static get FieldNames() {\n    return ['name', 'phone', 'email', 'message'];\n  }\n  \n  constructor (props) {\n    super(props);\n\n    // initial state object for form fields\n    const stateForFields = {}\n\n    // fills initial value and error state for fields\n    this.constructor.FieldNames.forEach(fieldName => {\n      stateForFields[fieldName] = '';\n      stateForFields[`${fieldName}Error`] = false;\n    });\n\n    this.state = {\n      ...stateForFields,\n      success: false,\n      error: '',\n      inflight: false,\n    };\n  }\n\n  handleInputOnChange = e => {\n    e.target.classList.add('active');\n    const {name, value} = e.target;\n    this.setState({ [name]: value });\n  }\n\n  // componentWillMount() {\n  //   if (M) M.updateTextFields();\n  // }\n\n  emailIsValid = () => EmailValidator.validate(this.state.email);\n\n  phoneIsValid = () => {\n    const result = PhoneValidator(this.state.phone, 'USA', true);\n    return result.length > 0;\n  };\n\n  setError = (fieldName, bool) => this.setState({ [`${fieldName}Error`]: bool });\n\n  validateFields = () => {\n    // validates specified fields,\n    const fieldsToValidate = ['email', 'phone'];   \n    \n    // returns array of errors\n    const errors = [];\n\n    // runs validator fieldIsValid for each\n    fieldsToValidate.forEach(fieldName => {\n      const isValid = this[`${fieldName}IsValid`]();\n      if (!isValid) errors.push(`${fieldName} is invalid`);\n      this.setError(fieldName, !isValid);\n    });\n\n    return errors;\n  };\n\n  isMissingFields = () => {\n    // iterates over field names, checks the field has a value in state\n    // if there is no value sets its error state to true\n    // returns true if any field is missing\n    const missingFieldNames = [];\n    const filledFieldNames = [];\n\n    // sort fieldName into missing or filled\n    this.constructor.FieldNames.forEach(fieldName => {\n      (!this.state[fieldName] ? missingFieldNames : filledFieldNames).push(fieldName);\n    });\n\n    // set fieldError to true or false\n    missingFieldNames.forEach(fieldName => this.setError(fieldName, true));\n    filledFieldNames.forEach(fieldName => this.setError(fieldName, false));\n\n    return missingFieldNames.length > 0;\n  }\n\n  handleErrors = () => {\n    // holds errors generated from existence and validation checks\n    const errors = [];\n    \n    const isMissingFields = this.isMissingFields();\n\n    if (isMissingFields) {\n      // add error message if missing any fields\n      errors.push('The highlighted fields are required');\n    } else {\n      // validates fields, add errors for invalid fields\n      errors.push.apply(errors, this.validateFields());\n    }\n\n    // generates the error message from errors and saves it to state for display\n    // as feedback to the user, if none will be empty string\n    this.setState({ error:  errors.join(', ') });\n\n    // if there are any errors, return false\n    return errors.length > 0;\n  }\n\n  getErrorStatus = fieldName => {\n    // helper for getting a fields error state by fieldName\n    return this.state[`${fieldName}Error`];\n  }\n\n  handleSubmit = e => {\n    // prevent page from refreshing on submit\n    e.preventDefault();\n    console.log('handle submit ran');\n    \n    // Runs only if there are no errors\n    if (!this.handleErrors()) {\n      const {name, phone, email, message} = this.state;\n      const failureMsg = 'Something went wrong. Please give us a call instead';\n      \n      // postContactForm will success or fail callback depending on whether\n      // the request resolves or errors out\n      const successCallback = res => {\n        const success = res.status == 200;\n        this.setState({ success, error: success ? '' : failureMsg });\n      };\n      const failCallback = () => this.setState({ success: false, error: failureMsg });\n  \n      postContactForm({ name, phone, email, message }, successCallback, failCallback);\n    }\n    \n    this.setState({ inflight: false });\n  }\n  \n  handleClick = e => {\n    e.preventDefault();\n    console.log('handle click ran');\n    this.setState({ inflight: true });\n    this.forceUpdate();\n    setTimeout(() => this.setState({ inflight: false }), 1000);\n    console.log('handle click done');\n  }\n\n  render(){\n    const { success, error, inflight } = this.state;\n\n    // sets contact form messaging based on success state\n    const messaging = success ? {\n      title: \"THANK YOU\",\n      msg: \"We've received your request. Keep an eye out for our email or phone call. We look forward to working with you.\"\n    } : {\n      title: \"REQUEST A FREE ESTIMATE\",\n      msg: \"Short but sweet prompt to user to contact us. Not too long, not too short.\"\n    };\n\n    return (\n      <form className=\"contact-form col col s12 m12 l5 right z-depth-3\" onSubmit={this.handleSubmit}>\n        <FormMessaging {...messaging} />\n        {!success && (\n          <div className=\"contact-fields\">\n            {this.constructor.FieldNames.map(name => (\n              <FormInput\n                name={name}\n                value={this.state[name]}\n                onChange={this.handleInputOnChange}\n                error={this.getErrorStatus(name)}\n                key={name}\n              />\n            ))}\n            {error && <p className=\"contact-error\">{error}</p>}\n            <button\n              className=\"waves-effect waves-light btn contact-button left\"\n              disabled={!!this.state.inflight}\n              onClick={this.handleClick}  \n            >\n              Submit Your Request\n            </button>\n          </div>\n        )}\n      </form>\n    );\n  }\n}\n\nexport default Contact;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAqBA;AADA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAzBA;AA8BA;AAAA;AACA;AA/BA;AAiCA;AACA;AACA;AACA;AApCA;AAqCA;AAAA;AACA;AAtCA;AAwCA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAvDA;AAyDA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AA1EA;AA4EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AADA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAhGA;AAkGA;AACA;AACA;AACA;AArGA;AAuGA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AA7HA;AA+HA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAlIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAJA;AAZA;AAkBA;AACA;;;AAoHA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AAFA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;;;;AAlLA;AACA;AAoLA;;;;A","sourceRoot":""}