{"version":3,"file":"static/webpack/static/development/pages/index.js.bab5ab5135f7154b7445.hot-update.js","sources":["webpack:///./components/ContactTemplate.js"],"sourcesContent":["import React from 'react';\nimport * as EmailValidator from 'email-validator';\nimport PhoneValidator from 'phone';\nimport postContactForm from '../bin/postContactForm';\n\nclass ContactTemplate extends React.Component {\n  static get FieldNames() {\n    return ['name', 'phone', 'email', 'message'];\n  }\n  \n  constructor (props) {\n    super(props);\n\n    // initial state object for form fields\n    const stateForFields = {}\n\n    // fills initial value and error state for fields\n    this.constructor.FieldNames.forEach(fieldName => {\n      stateForFields[fieldName] = '';\n      stateForFields[`${fieldName}Error`] = false;\n    });\n\n    this.state = {\n      ...stateForFields,\n      success: false,\n      error: '',\n      inflight: false,\n    };\n  }\n\n  handleInputOnChange = e => {\n    // add active class so materialize doesn't collapse lable\n    e.target.classList.add('active');\n  \n    const { name, value } = e.target;\n    this.setState({ [name]: value });\n  }\n\n  emailIsValid = () => EmailValidator.validate(this.state.email);\n\n  phoneIsValid = () => {\n    const result = PhoneValidator(this.state.phone, 'USA', true);\n    return result.length > 0;\n  };\n\n  setError = (fieldName, bool) => this.setState({ [`${fieldName}Error`]: bool });\n\n  validateFields = () => {\n    // validates specified fields,\n    const fieldsToValidate = ['email', 'phone'];   \n    \n    // returns array of errors\n    const errors = [];\n\n    // runs validator fieldIsValid for each\n    fieldsToValidate.forEach(fieldName => {\n      const isValid = this[`${fieldName}IsValid`]();\n      if (!isValid) errors.push(`${fieldName} is invalid`);\n      this.setError(fieldName, !isValid);\n    });\n\n    return errors;\n  };\n\n  isMissingFields = () => {\n    // iterates over field names, checks the field has a value in state\n    // if there is no value sets its error state to true\n    // returns true if any field is missing\n    const missingFieldNames = [];\n    const filledFieldNames = [];\n\n    // sort fieldName into missing or filled\n    this.constructor.FieldNames.forEach(fieldName => {\n      (!this.state[fieldName] ? missingFieldNames : filledFieldNames).push(fieldName);\n    });\n\n    // set fieldError to true or false\n    missingFieldNames.forEach(fieldName => this.setError(fieldName, true));\n    filledFieldNames.forEach(fieldName => this.setError(fieldName, false));\n\n    return missingFieldNames.length > 0;\n  }\n\n  handleErrors = () => {\n    // holds errors generated from existence and validation checks\n    const errors = [];\n    \n    const isMissingFields = this.isMissingFields();\n\n    if (isMissingFields) {\n      // add error message if missing any fields\n      errors.push('The highlighted fields are required');\n    } else {\n      // validates fields, add errors for invalid fields\n      errors.push.apply(errors, this.validateFields());\n    }\n\n    // generates the error message from errors and saves it to state for display\n    // as feedback to the user, if none will be empty string\n    this.setState({ error:  errors.join(', ') });\n\n    // if there are any errors, return false\n    return errors.length > 0;\n  }\n\n  getErrorStatus = fieldName => {\n    // helper for getting a fields error state by fieldName\n    return this.state[`${fieldName}Error`];\n  }\n\n  handleSubmit = async e => {\n    // prevent page from refreshing on submit\n    e.preventDefault();\n    \n    // set request status to inflight and force update to disable button\n    await this.setState({ inflight: true });\n    await this.forceUpdate();\n    \n    // Runs only if there are no errors\n    if (!this.handleErrors()) {\n      const {name, phone, email, message} = this.state;\n      const failureMsg = 'Something went wrong. Please give us a call instead';\n      \n      // postContactForm will success or fail callback depending on whether\n      // the request resolves or errors out\n      const successCallback = res => {\n        const success = res.status == 200;\n        this.setState({ success, error: success ? '' : failureMsg });\n      };\n      const failCallback = () => this.setState({ success: false, error: failureMsg });\n  \n      postContactForm({ name, phone, email, message }, successCallback, failCallback);\n    }\n\n    // 3 second delay before enabling button\n    setTimeout(() => this.setState({ inflight: false }), 3000);\n  }\n\n  render() {\n    // override in child class\n    return null;\n  }\n}\n\nexport default ContactTemplate;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAqBA;AACA;AAFA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AA3BA;AA4BA;AAAA;AACA;AA7BA;AA+BA;AACA;AACA;AACA;AAlCA;AAmCA;AAAA;AACA;AApCA;AAsCA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AACA;AArDA;AAuDA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAxEA;AA0EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AADA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AA9FA;AAgGA;AACA;AACA;AACA;AAnGA;AAoGA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AAKA;AAAA;AACA;AANA;AAAA;AAAA;AACA;AADA;AAQA;AACA;AAAA;AAEA;AAGA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AA1BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAjGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAJA;AAZA;AAkBA;AACA;;;AA6GA;AACA;AACA;AACA;;;;AAxIA;AACA;AA0IA;;;;A","sourceRoot":""}