{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport * as EmailValidator from 'email-validator';\nimport PhoneValidator from 'phone';\nimport postContactForm from '../bin/postContactForm';\n\nvar ContactTemplate = /*#__PURE__*/function (_React$Component) {\n  _inherits(ContactTemplate, _React$Component);\n\n  var _super = _createSuper(ContactTemplate);\n\n  _createClass(ContactTemplate, null, [{\n    key: \"FieldNames\",\n    get: function get() {\n      return ['name', 'phone', 'email', 'message'];\n    }\n  }]);\n\n  function ContactTemplate(props) {\n    var _this;\n\n    _classCallCheck(this, ContactTemplate);\n\n    _this = _super.call(this, props); // initial state object for form fields\n\n    _defineProperty(_assertThisInitialized(_this), \"handleInputOnChange\", function (e) {\n      // add active class so materialize doesn't collapse lable\n      e.target.classList.add('active');\n      var _e$target = e.target,\n          name = _e$target.name,\n          value = _e$target.value;\n\n      _this.setState(_defineProperty({}, name, value));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"emailIsValid\", function () {\n      return EmailValidator.validate(_this.state.email);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"phoneIsValid\", function () {\n      var result = PhoneValidator(_this.state.phone, 'USA', true);\n      return result.length > 0;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setError\", function (fieldName, bool) {\n      return _this.setState(_defineProperty({}, \"\".concat(fieldName, \"Error\"), bool));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"validateFields\", function () {\n      // validates specified fields,\n      var fieldsToValidate = ['email', 'phone']; // returns array of errors\n\n      var errors = []; // runs validator fieldIsValid for each\n\n      fieldsToValidate.forEach(function (fieldName) {\n        var isValid = _this[\"\".concat(fieldName, \"IsValid\")]();\n\n        if (!isValid) errors.push(\"\".concat(fieldName, \" is invalid\"));\n\n        _this.setError(fieldName, !isValid);\n      });\n      return errors;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"isMissingFields\", function () {\n      // iterates over field names, checks the field has a value in state\n      // if there is no value sets its error state to true\n      // returns true if any field is missing\n      var missingFieldNames = [];\n      var filledFieldNames = []; // sort fieldName into missing or filled\n\n      _this.constructor.FieldNames.forEach(function (fieldName) {\n        (!_this.state[fieldName] ? missingFieldNames : filledFieldNames).push(fieldName);\n      }); // set fieldError to true or false\n\n\n      missingFieldNames.forEach(function (fieldName) {\n        return _this.setError(fieldName, true);\n      });\n      filledFieldNames.forEach(function (fieldName) {\n        return _this.setError(fieldName, false);\n      });\n      return missingFieldNames.length > 0;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleErrors\", function () {\n      // holds errors generated from existence and validation checks\n      var errors = [];\n\n      var isMissingFields = _this.isMissingFields();\n\n      if (isMissingFields) {\n        // add error message if missing any fields\n        errors.push('The highlighted fields are required');\n      } else {\n        // validates fields, add errors for invalid fields\n        errors.push.apply(errors, _this.validateFields());\n      } // generates the error message from errors and saves it to state for display\n      // as feedback to the user, if none will be empty string\n\n\n      _this.setState({\n        error: errors.join(', ')\n      }); // if there are any errors, return false\n\n\n      return errors.length > 0;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getErrorStatus\", function (fieldName) {\n      // helper for getting a fields error state by fieldName\n      return _this.state[\"\".concat(fieldName, \"Error\")];\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSubmit\", function _callee(e) {\n      var _this$state, name, phone, email, message, failureMsg, successCallback, failCallback;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // prevent page from refreshing on submit\n              e.preventDefault(); // set request status to inflight and force update to disable button\n\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(_this.setState({\n                inflight: true\n              }));\n\n            case 3:\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(_this.forceUpdate());\n\n            case 5:\n              // Runs only if there are no errors\n              if (!_this.handleErrors()) {\n                _this$state = _this.state, name = _this$state.name, phone = _this$state.phone, email = _this$state.email, message = _this$state.message;\n                failureMsg = 'Something went wrong. Please give us a call instead'; // postContactForm will success or fail callback depending on whether\n                // the request resolves or errors out\n\n                successCallback = function successCallback(res) {\n                  var success = res.status == 200;\n\n                  _this.setState({\n                    success: success,\n                    error: success ? '' : failureMsg\n                  });\n                };\n\n                failCallback = function failCallback() {\n                  return _this.setState({\n                    success: false,\n                    error: failureMsg\n                  });\n                };\n\n                postContactForm({\n                  name: name,\n                  phone: phone,\n                  email: email,\n                  message: message\n                }, successCallback, failCallback);\n              } // 3 second delay before enabling button\n\n\n              setTimeout(function () {\n                return _this.setState({\n                  inflight: false\n                });\n              }, 3000);\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    });\n\n    var stateForFields = {}; // fills initial value and error state for fields\n\n    _this.constructor.FieldNames.forEach(function (fieldName) {\n      stateForFields[fieldName] = '';\n      stateForFields[\"\".concat(fieldName, \"Error\")] = false;\n    });\n\n    _this.state = _objectSpread({}, stateForFields, {\n      success: false,\n      error: '',\n      inflight: false\n    });\n    return _this;\n  }\n\n  _createClass(ContactTemplate, [{\n    key: \"render\",\n    value: function render() {\n      // override in child class\n      return null;\n    }\n  }]);\n\n  return ContactTemplate;\n}(React.Component);\n\nexport default ContactTemplate;","map":null,"metadata":{},"sourceType":"module"}