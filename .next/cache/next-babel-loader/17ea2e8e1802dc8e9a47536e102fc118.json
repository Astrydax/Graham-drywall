{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/antho/Desktop/Graham-drywall/components/hero/contact/index.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport * as EmailValidator from 'email-validator';\nimport PhoneValidator from 'phone';\nimport FormInput from './FormInput';\nimport FormMessaging from './FormMessaging';\nimport postContactForm from '../../../bin/postContactForm';\nimport M from '../../../bin/materializeLoader';\n\nclass Contact extends React.Component {\n  static get FieldNames() {\n    return ['name', 'phone', 'email', 'message'];\n  }\n\n  constructor(props) {\n    super(props); // initial state object for form fields\n\n    _defineProperty(this, \"handleInputOnChange\", e => {\n      e.target.classList.add('active');\n      const {\n        name,\n        value\n      } = e.target;\n      this.setState({\n        [name]: value\n      });\n    });\n\n    _defineProperty(this, \"emailIsValid\", () => EmailValidator.validate(this.state.email));\n\n    _defineProperty(this, \"phoneIsValid\", () => {\n      const result = PhoneValidator(this.state.phone, 'USA', true);\n      return result.length > 0;\n    });\n\n    _defineProperty(this, \"setError\", (fieldName, bool) => this.setState({\n      [`${fieldName}Error`]: bool\n    }));\n\n    _defineProperty(this, \"validateFields\", () => {\n      // validates specified fields,\n      const fieldsToValidate = ['email', 'phone']; // returns array of errors\n\n      const errors = []; // runs validator fieldIsValid for each\n\n      fieldsToValidate.forEach(fieldName => {\n        const isValid = this[`${fieldName}IsValid`]();\n        if (!isValid) errors.push(`${fieldName} is invalid`);\n        this.setError(fieldName, !isValid);\n      });\n      return errors;\n    });\n\n    _defineProperty(this, \"isMissingFields\", () => {\n      // iterates over field names, checks the field has a value in state\n      // if there is no value sets its error state to true\n      // returns true if any field is missing\n      const missingFieldNames = [];\n      const filledFieldNames = []; // sort fieldName into missing or filled\n\n      this.constructor.FieldNames.forEach(fieldName => {\n        (!this.state[fieldName] ? missingFieldNames : filledFieldNames).push(fieldName);\n      }); // set fieldError to true or false\n\n      missingFieldNames.forEach(fieldName => this.setError(fieldName, true));\n      filledFieldNames.forEach(fieldName => this.setError(fieldName, false));\n      return missingFieldNames.length > 0;\n    });\n\n    _defineProperty(this, \"handleErrors\", () => {\n      // holds errors generated from existence and validation checks\n      const errors = [];\n      const isMissingFields = this.isMissingFields();\n\n      if (isMissingFields) {\n        // add error message if missing any fields\n        errors.push('The highlighted fields are required');\n      } else {\n        // validates fields, add errors for invalid fields\n        errors.push.apply(errors, this.validateFields());\n      } // generates the error message from errors and saves it to state for display\n      // as feedback to the user, if none will be empty string\n\n\n      this.setState({\n        error: errors.join(', ')\n      }); // if there are any errors, return false\n\n      return errors.length > 0;\n    });\n\n    _defineProperty(this, \"getErrorStatus\", fieldName => {\n      // helper for getting a fields error state by fieldName\n      return this.state[`${fieldName}Error`];\n    });\n\n    _defineProperty(this, \"handleSubmit\", ev => {\n      // prevent page from refreshing on submit\n      ev.preventDefault();\n      const form = ev.target;\n      const data = new FormData(form);\n      const xhr = new XMLHttpRequest(); // Runs only if there are no errors\n\n      if (!this.handleErrors()) {\n        const {\n          name,\n          phone,\n          email,\n          address,\n          message\n        } = this.state; // xhr.open(form.method, form.action);\n        // xhr.setRequestHeader(\"Accept\", \"application/json\");\n        // xhr.onreadystatechange = () => {\n        //   if (xhr.readyState !== XMLHttpRequest.DONE) return;\n        //   if (xhr.status === 200) {\n        //     form.reset();\n        //     this.setState({status: \"SUCCESS\"});\n        //   } else {\n        //     this.setState({status: \"ERROR\"});\n        //   }\n        // };\n        // xhr.send(data);\n\n        const failureMsg = 'Something went wrong. Please give us a call instead'; // postContactForm will success or fail callback depending on whether\n        // the request resolves or errors out\n\n        const successCallback = res => {\n          const success = res.status == 200;\n          this.setState({\n            success,\n            error: success ? '' : failureMsg\n          });\n        };\n\n        const failCallback = () => this.setState({\n          success: false,\n          error: failureMsg\n        });\n\n        postContactForm({\n          name,\n          phone,\n          email,\n          address,\n          message\n        }, successCallback, failCallback);\n      }\n\n      M.updateTextFields();\n    });\n\n    const stateForFields = {}; // fills initial value and error state for fields\n\n    this.constructor.FieldNames.forEach(fieldName => {\n      stateForFields[fieldName] = '';\n      stateForFields[`${fieldName}Error`] = false;\n    });\n    this.state = _objectSpread({}, stateForFields, {\n      success: false,\n      error: ''\n    });\n  }\n\n  render() {\n    const {\n      success,\n      error\n    } = this.state; // sets contact form messaging based on success state\n\n    const messaging = success ? {\n      title: \"THANK YOU\",\n      msg: \"We've received your request. Keep an eye out for our email or phone call. We look forward to working with you.\"\n    } : {\n      title: \"REQUEST A FREE ESTIMATE\",\n      msg: \"Short but sweet prompt to user to contact us. Not too long, not too short.\"\n    };\n    return __jsx(\"form\", {\n      className: \"contact-form col col s12 m12 l5 right z-depth-3\",\n      onSubmit: this.handleSubmit,\n      action: \"https://formspree.io/mgelkeeo\",\n      method: \"POST\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 7\n      }\n    }, __jsx(FormMessaging, _extends({}, messaging, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }\n    })), !success && __jsx(\"div\", {\n      className: \"contact-fields\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 11\n      }\n    }, this.constructor.FieldNames.map(name => __jsx(FormInput, {\n      name: name,\n      value: this.state[name],\n      onChange: this.handleInputOnChange,\n      error: this.getErrorStatus(name),\n      key: name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 15\n      }\n    })), error && __jsx(\"p\", {\n      className: \"contact-error\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 23\n      }\n    }, error), __jsx(\"button\", {\n      className: \"waves-effect waves-light btn contact-button left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 13\n      }\n    }, \"Submit Your Request\")));\n  }\n\n}\n\nexport default Contact;","map":{"version":3,"sources":["/mnt/c/Users/antho/Desktop/Graham-drywall/components/hero/contact/index.js"],"names":["React","EmailValidator","PhoneValidator","FormInput","FormMessaging","postContactForm","M","Contact","Component","FieldNames","constructor","props","e","target","classList","add","name","value","setState","validate","state","email","result","phone","length","fieldName","bool","fieldsToValidate","errors","forEach","isValid","push","setError","missingFieldNames","filledFieldNames","isMissingFields","apply","validateFields","error","join","ev","preventDefault","form","data","FormData","xhr","XMLHttpRequest","handleErrors","address","message","failureMsg","successCallback","res","success","status","failCallback","updateTextFields","stateForFields","render","messaging","title","msg","handleSubmit","map","handleInputOnChange","getErrorStatus"],"mappings":"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","sourcesContent":["import React from 'react';\nimport * as EmailValidator from 'email-validator';\nimport PhoneValidator from 'phone';\nimport FormInput from './FormInput';\nimport FormMessaging from './FormMessaging';\nimport postContactForm from '../../../bin/postContactForm';\nimport M from '../../../bin/materializeLoader';\n\nclass Contact extends React.Component {\n  static get FieldNames() {\n    return ['name', 'phone', 'email', 'message'];\n  }\n  \n  constructor (props) {\n    super(props);\n\n    // initial state object for form fields\n    const stateForFields = {}\n\n    // fills initial value and error state for fields\n    this.constructor.FieldNames.forEach(fieldName => {\n      stateForFields[fieldName] = '';\n      stateForFields[`${fieldName}Error`] = false;\n    });\n\n    this.state = {\n      ...stateForFields,\n      success: false,\n      error: '',\n    };\n  }\n\n  handleInputOnChange = e => {\n    e.target.classList.add('active');\n    const {name, value} = e.target;\n    this.setState({ [name]: value });\n  }\n\n  // componentWillMount() {\n  //   if (M) M.updateTextFields();\n  // }\n\n  emailIsValid = () => EmailValidator.validate(this.state.email);\n\n  phoneIsValid = () => {\n    const result = PhoneValidator(this.state.phone, 'USA', true);\n    return result.length > 0;\n  };\n\n  setError = (fieldName, bool) => this.setState({ [`${fieldName}Error`]: bool });\n\n  validateFields = () => {\n    // validates specified fields,\n    const fieldsToValidate = ['email', 'phone'];   \n    \n    // returns array of errors\n    const errors = [];\n\n    // runs validator fieldIsValid for each\n    fieldsToValidate.forEach(fieldName => {\n      const isValid = this[`${fieldName}IsValid`]();\n      if (!isValid) errors.push(`${fieldName} is invalid`);\n      this.setError(fieldName, !isValid);\n    });\n\n    return errors;\n  };\n\n  isMissingFields = () => {\n    // iterates over field names, checks the field has a value in state\n    // if there is no value sets its error state to true\n    // returns true if any field is missing\n    const missingFieldNames = [];\n    const filledFieldNames = [];\n\n    // sort fieldName into missing or filled\n    this.constructor.FieldNames.forEach(fieldName => {\n      (!this.state[fieldName] ? missingFieldNames : filledFieldNames).push(fieldName);\n    });\n\n    // set fieldError to true or false\n    missingFieldNames.forEach(fieldName => this.setError(fieldName, true));\n    filledFieldNames.forEach(fieldName => this.setError(fieldName, false));\n\n    return missingFieldNames.length > 0;\n  }\n\n  handleErrors = () => {\n    // holds errors generated from existence and validation checks\n    const errors = [];\n    \n    const isMissingFields = this.isMissingFields();\n\n    if (isMissingFields) {\n      // add error message if missing any fields\n      errors.push('The highlighted fields are required');\n    } else {\n      // validates fields, add errors for invalid fields\n      errors.push.apply(errors, this.validateFields());\n    }\n\n    // generates the error message from errors and saves it to state for display\n    // as feedback to the user, if none will be empty string\n    this.setState({ error:  errors.join(', ') });\n\n    // if there are any errors, return false\n    return errors.length > 0;\n  }\n\n  getErrorStatus = fieldName => {\n    // helper for getting a fields error state by fieldName\n    return this.state[`${fieldName}Error`];\n  }\n\n  handleSubmit = ev => {\n    // prevent page from refreshing on submit\n    ev.preventDefault();\n    const form = ev.target;\n    const data = new FormData(form);\n    const xhr = new XMLHttpRequest();\n    // Runs only if there are no errors\n    if (!this.handleErrors()) {\n      const {name, phone, email, address, message} = this.state;\n      // xhr.open(form.method, form.action);\n      // xhr.setRequestHeader(\"Accept\", \"application/json\");\n      // xhr.onreadystatechange = () => {\n      //   if (xhr.readyState !== XMLHttpRequest.DONE) return;\n      //   if (xhr.status === 200) {\n      //     form.reset();\n      //     this.setState({status: \"SUCCESS\"});\n      //   } else {\n      //     this.setState({status: \"ERROR\"});\n      //   }\n      // };\n      // xhr.send(data);\n      const failureMsg = 'Something went wrong. Please give us a call instead';\n      \n      // postContactForm will success or fail callback depending on whether\n      // the request resolves or errors out\n      const successCallback = res => {\n        const success = res.status == 200;\n        this.setState({ success, error: success ? '' : failureMsg });\n      };\n      const failCallback = () => this.setState({ success: false, error: failureMsg });\n  \n      postContactForm({ name, phone, email, address, message }, successCallback, failCallback);\n    }\n    M.updateTextFields();\n  }\n\n  render(){\n    const { success, error } = this.state;\n\n    // sets contact form messaging based on success state\n    const messaging = success ? {\n      title: \"THANK YOU\",\n      msg: \"We've received your request. Keep an eye out for our email or phone call. We look forward to working with you.\"\n    } : {\n      title: \"REQUEST A FREE ESTIMATE\",\n      msg: \"Short but sweet prompt to user to contact us. Not too long, not too short.\"\n    };\n\n    return (\n      <form className=\"contact-form col col s12 m12 l5 right z-depth-3\" onSubmit={this.handleSubmit} action={\"https://formspree.io/mgelkeeo\"} method={\"POST\"}>\n        <FormMessaging {...messaging} />\n        {!success && (\n          <div className=\"contact-fields\">\n            {this.constructor.FieldNames.map(name => (\n              <FormInput\n                name={name}\n                value={this.state[name]}\n                onChange={this.handleInputOnChange}\n                error={this.getErrorStatus(name)}\n                key={name}\n              />\n            ))}\n            {error && <p className=\"contact-error\">{error}</p>}\n            <button className=\"waves-effect waves-light btn contact-button left\">Submit Your Request</button>\n          </div>\n        )}\n      </form>\n    );\n  }\n}\n\nexport default Contact;\n"]},"metadata":{},"sourceType":"module"}