{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport * as EmailValidator from 'email-validator';\nimport PhoneValidator from 'phone';\nimport postContactForm from '../bin/postContactForm';\n\nclass ContactTemplate extends React.Component {\n  static get FieldNames() {\n    return ['name', 'phone', 'email', 'message'];\n  }\n\n  constructor(props) {\n    super(props); // initial state object for form fields\n\n    _defineProperty(this, \"handleInputOnChange\", e => {\n      // add active class so materialize doesn't collapse lable\n      e.target.classList.add('active');\n      const {\n        name,\n        value\n      } = e.target;\n      this.setState({\n        [name]: value\n      });\n    });\n\n    _defineProperty(this, \"emailIsValid\", () => EmailValidator.validate(this.state.email));\n\n    _defineProperty(this, \"phoneIsValid\", () => {\n      const result = PhoneValidator(this.state.phone, 'USA', true);\n      return result.length > 0;\n    });\n\n    _defineProperty(this, \"setError\", (fieldName, bool) => this.setState({\n      [`${fieldName}Error`]: bool\n    }));\n\n    _defineProperty(this, \"validateFields\", () => {\n      // validates specified fields,\n      const fieldsToValidate = ['email', 'phone']; // returns array of errors\n\n      const errors = []; // runs validator fieldIsValid for each\n\n      fieldsToValidate.forEach(fieldName => {\n        const isValid = this[`${fieldName}IsValid`]();\n        if (!isValid) errors.push(`${fieldName} is invalid`);\n        this.setError(fieldName, !isValid);\n      });\n      return errors;\n    });\n\n    _defineProperty(this, \"isMissingFields\", () => {\n      // iterates over field names, checks the field has a value in state\n      // if there is no value sets its error state to true\n      // returns true if any field is missing\n      const missingFieldNames = [];\n      const filledFieldNames = []; // sort fieldName into missing or filled\n\n      this.constructor.FieldNames.forEach(fieldName => {\n        (!this.state[fieldName] ? missingFieldNames : filledFieldNames).push(fieldName);\n      }); // set fieldError to true or false\n\n      missingFieldNames.forEach(fieldName => this.setError(fieldName, true));\n      filledFieldNames.forEach(fieldName => this.setError(fieldName, false));\n      return missingFieldNames.length > 0;\n    });\n\n    _defineProperty(this, \"handleErrors\", () => {\n      // holds errors generated from existence and validation checks\n      const errors = [];\n      const isMissingFields = this.isMissingFields();\n\n      if (isMissingFields) {\n        // add error message if missing any fields\n        errors.push('The highlighted fields are required');\n      } else {\n        // validates fields, add errors for invalid fields\n        errors.push.apply(errors, this.validateFields());\n      } // generates the error message from errors and saves it to state for display\n      // as feedback to the user, if none will be empty string\n\n\n      this.setState({\n        error: errors.join(', ')\n      }); // if there are any errors, return false\n\n      return errors.length > 0;\n    });\n\n    _defineProperty(this, \"getErrorStatus\", fieldName => {\n      // helper for getting a fields error state by fieldName\n      return this.state[`${fieldName}Error`];\n    });\n\n    _defineProperty(this, \"handleSubmit\", async e => {\n      // prevent page from refreshing on submit\n      e.preventDefault(); // set request status to inflight and force update to disable button\n\n      await this.setState({\n        inflight: true\n      });\n      await this.forceUpdate(); // Runs only if there are no errors\n\n      if (!this.handleErrors()) {\n        const {\n          name,\n          phone,\n          email,\n          message\n        } = this.state;\n        const failureMsg = 'Something went wrong. Please give us a call instead'; // postContactForm will success or fail callback depending on whether\n        // the request resolves or errors out\n\n        const successCallback = res => {\n          const success = res.status == 200;\n          this.setState({\n            success,\n            error: success ? '' : failureMsg\n          });\n        };\n\n        const failCallback = () => this.setState({\n          success: false,\n          error: failureMsg\n        });\n\n        postContactForm({\n          name,\n          phone,\n          email,\n          message\n        }, successCallback, failCallback);\n      } // 3 second delay before enabling button\n\n\n      setTimeout(() => this.setState({\n        inflight: false\n      }), 3000);\n    });\n\n    const stateForFields = {}; // fills initial value and error state for fields\n\n    this.constructor.FieldNames.forEach(fieldName => {\n      stateForFields[fieldName] = '';\n      stateForFields[`${fieldName}Error`] = false;\n    });\n    this.state = _objectSpread({}, stateForFields, {\n      success: false,\n      error: '',\n      inflight: false\n    });\n  }\n\n  render() {\n    // override in child class\n    return null;\n  }\n\n}\n\nexport default ContactTemplate;","map":null,"metadata":{},"sourceType":"module"}