{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/mnt/c/Users/antho/Desktop/Graham-drywall/components/hero/contact/index.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport * as EmailValidator from 'email-validator';\nimport PhoneValidator from 'phone';\nimport FormInput from './FormInput';\nimport FormMessaging from './FormMessaging';\nimport postContactForm from '../../../bin/postContactForm';\nimport M from '../../../bin/materializeLoader';\n\nvar Contact = /*#__PURE__*/function (_React$Component) {\n  _inherits(Contact, _React$Component);\n\n  var _super = _createSuper(Contact);\n\n  _createClass(Contact, null, [{\n    key: \"FieldNames\",\n    get: function get() {\n      return ['name', 'phone', 'email', 'message'];\n    }\n  }]);\n\n  function Contact(props) {\n    var _this;\n\n    _classCallCheck(this, Contact);\n\n    _this = _super.call(this, props); // initial state object for form fields\n\n    _defineProperty(_assertThisInitialized(_this), \"handleInputOnChange\", function (e) {\n      e.target.classList.add('active');\n      var _e$target = e.target,\n          name = _e$target.name,\n          value = _e$target.value;\n\n      _this.setState(_defineProperty({}, name, value));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"emailIsValid\", function () {\n      return EmailValidator.validate(_this.state.email);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"phoneIsValid\", function () {\n      var result = PhoneValidator(_this.state.phone, 'USA', true);\n      return result.length > 0;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setError\", function (fieldName, bool) {\n      return _this.setState(_defineProperty({}, \"\".concat(fieldName, \"Error\"), bool));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"validateFields\", function () {\n      // validates specified fields,\n      var fieldsToValidate = ['email', 'phone']; // returns array of errors\n\n      var errors = []; // runs validator fieldIsValid for each\n\n      fieldsToValidate.forEach(function (fieldName) {\n        var isValid = _this[\"\".concat(fieldName, \"IsValid\")]();\n\n        if (!isValid) errors.push(\"\".concat(fieldName, \" is invalid\"));\n\n        _this.setError(fieldName, !isValid);\n      });\n      return errors;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"isMissingFields\", function () {\n      // iterates over field names, checks the field has a value in state\n      // if there is no value sets its error state to true\n      // returns true if any field is missing\n      var missingFieldNames = [];\n      var filledFieldNames = []; // sort fieldName into missing or filled\n\n      _this.constructor.FieldNames.forEach(function (fieldName) {\n        (!_this.state[fieldName] ? missingFieldNames : filledFieldNames).push(fieldName);\n      }); // set fieldError to true or false\n\n\n      missingFieldNames.forEach(function (fieldName) {\n        return _this.setError(fieldName, true);\n      });\n      filledFieldNames.forEach(function (fieldName) {\n        return _this.setError(fieldName, false);\n      });\n      return missingFieldNames.length > 0;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleErrors\", function () {\n      // holds errors generated from existence and validation checks\n      var errors = [];\n\n      var isMissingFields = _this.isMissingFields();\n\n      if (isMissingFields) {\n        // add error message if missing any fields\n        errors.push('The highlighted fields are required');\n      } else {\n        // validates fields, add errors for invalid fields\n        errors.push.apply(errors, _this.validateFields());\n      } // generates the error message from errors and saves it to state for display\n      // as feedback to the user, if none will be empty string\n\n\n      _this.setState({\n        error: errors.join(', ')\n      }); // if there are any errors, return false\n\n\n      return errors.length > 0;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getErrorStatus\", function (fieldName) {\n      // helper for getting a fields error state by fieldName\n      return _this.state[\"\".concat(fieldName, \"Error\")];\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSubmit\", function (e) {\n      // prevent page from refreshing on submit\n      e.preventDefault();\n\n      _this.setState({\n        inflight: true\n      }); // Runs only if there are no errors\n\n\n      if (!_this.handleErrors()) {\n        var _this$state = _this.state,\n            name = _this$state.name,\n            phone = _this$state.phone,\n            email = _this$state.email,\n            message = _this$state.message;\n        var failureMsg = 'Something went wrong. Please give us a call instead'; // postContactForm will success or fail callback depending on whether\n        // the request resolves or errors out\n\n        var successCallback = function successCallback(res) {\n          var success = res.status == 200;\n\n          _this.setState({\n            success: success,\n            error: success ? '' : failureMsg\n          });\n        };\n\n        var failCallback = function failCallback() {\n          return _this.setState({\n            success: false,\n            error: failureMsg\n          });\n        };\n\n        postContactForm({\n          name: name,\n          phone: phone,\n          email: email,\n          message: message\n        }, successCallback, failCallback);\n      }\n\n      _this.setState({\n        inflight: false\n      });\n    });\n\n    var stateForFields = {}; // fills initial value and error state for fields\n\n    _this.constructor.FieldNames.forEach(function (fieldName) {\n      stateForFields[fieldName] = '';\n      stateForFields[\"\".concat(fieldName, \"Error\")] = false;\n    });\n\n    _this.state = _objectSpread({}, stateForFields, {\n      success: false,\n      error: ''\n    });\n    return _this;\n  }\n\n  _createClass(Contact, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state2 = this.state,\n          success = _this$state2.success,\n          error = _this$state2.error,\n          inflight = _this$state2.inflight; // sets contact form messaging based on success state\n\n      var messaging = success ? {\n        title: \"THANK YOU\",\n        msg: \"We've received your request. Keep an eye out for our email or phone call. We look forward to working with you.\"\n      } : {\n        title: \"REQUEST A FREE ESTIMATE\",\n        msg: \"Short but sweet prompt to user to contact us. Not too long, not too short.\"\n      };\n      return __jsx(\"form\", {\n        className: \"contact-form col col s12 m12 l5 right z-depth-3\",\n        onSubmit: this.handleSubmit,\n        action: \"https://formspree.io/mgelkeeo\",\n        method: \"POST\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 7\n        }\n      }, __jsx(FormMessaging, _extends({}, messaging, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 9\n        }\n      })), !success && __jsx(\"div\", {\n        className: \"contact-fields\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }\n      }, this.constructor.FieldNames.map(function (name) {\n        return __jsx(FormInput, {\n          name: name,\n          value: _this2.state[name],\n          onChange: _this2.handleInputOnChange,\n          error: _this2.getErrorStatus(name),\n          key: name,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 15\n          }\n        });\n      }), error && __jsx(\"p\", {\n        className: \"contact-error\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 23\n        }\n      }, error), __jsx(\"button\", {\n        className: \"waves-effect waves-light btn contact-button left\",\n        disabled: inflight,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 13\n        }\n      }, \"Submit Your Request\")));\n    }\n  }]);\n\n  return Contact;\n}(React.Component);\n\nexport default Contact;","map":{"version":3,"sources":["/mnt/c/Users/antho/Desktop/Graham-drywall/components/hero/contact/index.js"],"names":["React","EmailValidator","PhoneValidator","FormInput","FormMessaging","postContactForm","M","Contact","props","e","target","classList","add","name","value","setState","validate","state","email","result","phone","length","fieldName","bool","fieldsToValidate","errors","forEach","isValid","push","setError","missingFieldNames","filledFieldNames","constructor","FieldNames","isMissingFields","apply","validateFields","error","join","preventDefault","inflight","handleErrors","message","failureMsg","successCallback","res","success","status","failCallback","stateForFields","messaging","title","msg","handleSubmit","map","handleInputOnChange","getErrorStatus","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport * as EmailValidator from 'email-validator';\nimport PhoneValidator from 'phone';\nimport FormInput from './FormInput';\nimport FormMessaging from './FormMessaging';\nimport postContactForm from '../../../bin/postContactForm';\nimport M from '../../../bin/materializeLoader';\n\nclass Contact extends React.Component {\n  static get FieldNames() {\n    return ['name', 'phone', 'email', 'message'];\n  }\n  \n  constructor (props) {\n    super(props);\n\n    // initial state object for form fields\n    const stateForFields = {}\n\n    // fills initial value and error state for fields\n    this.constructor.FieldNames.forEach(fieldName => {\n      stateForFields[fieldName] = '';\n      stateForFields[`${fieldName}Error`] = false;\n    });\n\n    this.state = {\n      ...stateForFields,\n      success: false,\n      error: '',\n\n    };\n  }\n\n  handleInputOnChange = e => {\n    e.target.classList.add('active');\n    const {name, value} = e.target;\n    this.setState({ [name]: value });\n  }\n\n  // componentWillMount() {\n  //   if (M) M.updateTextFields();\n  // }\n\n  emailIsValid = () => EmailValidator.validate(this.state.email);\n\n  phoneIsValid = () => {\n    const result = PhoneValidator(this.state.phone, 'USA', true);\n    return result.length > 0;\n  };\n\n  setError = (fieldName, bool) => this.setState({ [`${fieldName}Error`]: bool });\n\n  validateFields = () => {\n    // validates specified fields,\n    const fieldsToValidate = ['email', 'phone'];   \n    \n    // returns array of errors\n    const errors = [];\n\n    // runs validator fieldIsValid for each\n    fieldsToValidate.forEach(fieldName => {\n      const isValid = this[`${fieldName}IsValid`]();\n      if (!isValid) errors.push(`${fieldName} is invalid`);\n      this.setError(fieldName, !isValid);\n    });\n\n    return errors;\n  };\n\n  isMissingFields = () => {\n    // iterates over field names, checks the field has a value in state\n    // if there is no value sets its error state to true\n    // returns true if any field is missing\n    const missingFieldNames = [];\n    const filledFieldNames = [];\n\n    // sort fieldName into missing or filled\n    this.constructor.FieldNames.forEach(fieldName => {\n      (!this.state[fieldName] ? missingFieldNames : filledFieldNames).push(fieldName);\n    });\n\n    // set fieldError to true or false\n    missingFieldNames.forEach(fieldName => this.setError(fieldName, true));\n    filledFieldNames.forEach(fieldName => this.setError(fieldName, false));\n\n    return missingFieldNames.length > 0;\n  }\n\n  handleErrors = () => {\n    // holds errors generated from existence and validation checks\n    const errors = [];\n    \n    const isMissingFields = this.isMissingFields();\n\n    if (isMissingFields) {\n      // add error message if missing any fields\n      errors.push('The highlighted fields are required');\n    } else {\n      // validates fields, add errors for invalid fields\n      errors.push.apply(errors, this.validateFields());\n    }\n\n    // generates the error message from errors and saves it to state for display\n    // as feedback to the user, if none will be empty string\n    this.setState({ error:  errors.join(', ') });\n\n    // if there are any errors, return false\n    return errors.length > 0;\n  }\n\n  getErrorStatus = fieldName => {\n    // helper for getting a fields error state by fieldName\n    return this.state[`${fieldName}Error`];\n  }\n\n  handleSubmit = e => {\n    // prevent page from refreshing on submit\n    e.preventDefault();\n\n    this.setState({ inflight: true });\n    \n    // Runs only if there are no errors\n    if (!this.handleErrors()) {\n      const {name, phone, email, message} = this.state;\n      const failureMsg = 'Something went wrong. Please give us a call instead';\n      \n      // postContactForm will success or fail callback depending on whether\n      // the request resolves or errors out\n      const successCallback = res => {\n        const success = res.status == 200;\n        this.setState({ success, error: success ? '' : failureMsg });\n      };\n      const failCallback = () => this.setState({ success: false, error: failureMsg });\n  \n      postContactForm({ name, phone, email, message }, successCallback, failCallback);\n    }\n    this.setState({ inflight: false });\n  }\n\n  render(){\n    const { success, error, inflight } = this.state;\n\n    // sets contact form messaging based on success state\n    const messaging = success ? {\n      title: \"THANK YOU\",\n      msg: \"We've received your request. Keep an eye out for our email or phone call. We look forward to working with you.\"\n    } : {\n      title: \"REQUEST A FREE ESTIMATE\",\n      msg: \"Short but sweet prompt to user to contact us. Not too long, not too short.\"\n    };\n\n    return (\n      <form className=\"contact-form col col s12 m12 l5 right z-depth-3\" onSubmit={this.handleSubmit} action={\"https://formspree.io/mgelkeeo\"} method={\"POST\"}>\n        <FormMessaging {...messaging} />\n        {!success && (\n          <div className=\"contact-fields\">\n            {this.constructor.FieldNames.map(name => (\n              <FormInput\n                name={name}\n                value={this.state[name]}\n                onChange={this.handleInputOnChange}\n                error={this.getErrorStatus(name)}\n                key={name}\n              />\n            ))}\n            {error && <p className=\"contact-error\">{error}</p>}\n            <button className=\"waves-effect waves-light btn contact-button left\" disabled={inflight}>Submit Your Request</button>\n          </div>\n        )}\n      </form>\n    );\n  }\n}\n\nexport default Contact;\n"]},"metadata":{},"sourceType":"module"}