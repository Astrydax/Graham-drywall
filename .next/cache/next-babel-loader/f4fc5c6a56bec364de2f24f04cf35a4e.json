{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport * as EmailValidator from 'email-validator';\nimport PhoneValidator from 'phone';\nimport postContactForm from '../bin/postContactForm';\n\nclass ContactTemplate extends React.Component {\n  static get FieldNames() {\n    return ['name', 'phone', 'email', 'message'];\n  }\n\n  constructor(props) {\n    super(props); // initial state object for form fields\n\n    _defineProperty(this, \"handleInputOnChange\", e => {\n      // add active class so materialize doesn't collapse lable\n      e.target.classList.add('active');\n      const {\n        name,\n        value\n      } = e.target;\n      this.setState({\n        [name]: value\n      });\n    });\n\n    _defineProperty(this, \"emailIsValid\", () => EmailValidator.validate(this.state.email));\n\n    _defineProperty(this, \"phoneIsValid\", () => {\n      const result = PhoneValidator(this.state.phone, 'USA', true);\n      return result.length > 0;\n    });\n\n    _defineProperty(this, \"setError\", (fieldName, bool) => this.setState({\n      [`${fieldName}Error`]: bool\n    }));\n\n    _defineProperty(this, \"validateFields\", () => {\n      // validates specified fields,\n      const fieldsToValidate = ['email', 'phone']; // returns array of errors\n\n      const errors = []; // runs validator fieldIsValid for each\n\n      fieldsToValidate.forEach(fieldName => {\n        const isValid = this[`${fieldName}IsValid`]();\n        if (!isValid) errors.push(`${fieldName} is invalid`);\n        this.setError(fieldName, !isValid);\n      });\n      return errors;\n    });\n\n    _defineProperty(this, \"isMissingFields\", () => {\n      // iterates over field names, checks the field has a value in state\n      // if there is no value sets its error state to true\n      // returns true if any field is missing\n      const missingFieldNames = [];\n      const filledFieldNames = []; // sort fieldName into missing or filled\n\n      this.constructor.FieldNames.forEach(fieldName => {\n        (!this.state[fieldName] ? missingFieldNames : filledFieldNames).push(fieldName);\n      }); // set fieldError to true or false\n\n      missingFieldNames.forEach(fieldName => this.setError(fieldName, true));\n      filledFieldNames.forEach(fieldName => this.setError(fieldName, false));\n      return missingFieldNames.length > 0;\n    });\n\n    _defineProperty(this, \"handleErrors\", () => {\n      // holds errors generated from existence and validation checks\n      const errors = [];\n      const isMissingFields = this.isMissingFields();\n\n      if (isMissingFields) {\n        // add error message if missing any fields\n        errors.push('The highlighted fields are required');\n      } else {\n        // validates fields, add errors for invalid fields\n        errors.push.apply(errors, this.validateFields());\n      } // generates the error message from errors and saves it to state for display\n      // as feedback to the user, if none will be empty string\n\n\n      this.setState({\n        error: errors.join(', ')\n      }); // if there are any errors, return false\n\n      return errors.length > 0;\n    });\n\n    _defineProperty(this, \"getErrorStatus\", fieldName => {\n      // helper for getting a fields error state by fieldName\n      return this.state[`${fieldName}Error`];\n    });\n\n    _defineProperty(this, \"handleSubmit\", async e => {\n      // prevent page from refreshing on submit\n      e.preventDefault(); // set request status to inflight and force update to disable button\n\n      await this.setState({\n        inflight: true\n      });\n      await this.forceUpdate(); // Runs only if there are no errors\n\n      if (!this.handleErrors()) {\n        const {\n          name,\n          phone,\n          email,\n          message\n        } = this.state;\n        const failureMsg = 'Something went wrong. Please give us a call instead'; // postContactForm will success or fail callback depending on whether\n        // the request resolves or errors out\n\n        const successCallback = res => {\n          const success = res.status == 200;\n          this.setState({\n            success,\n            error: success ? '' : failureMsg\n          });\n        };\n\n        const failCallback = () => this.setState({\n          success: false,\n          error: failureMsg\n        });\n\n        postContactForm({\n          name,\n          phone,\n          email,\n          message\n        }, successCallback, failCallback);\n      } // 3 second delay before enabling button\n\n\n      setTimeout(() => this.setState({\n        inflight: false\n      }), 3000);\n    });\n\n    const stateForFields = {}; // fills initial value and error state for fields\n\n    this.constructor.FieldNames.forEach(fieldName => {\n      stateForFields[fieldName] = '';\n      stateForFields[`${fieldName}Error`] = false;\n    });\n    this.state = _objectSpread({}, stateForFields, {\n      success: false,\n      error: '',\n      inflight: false\n    });\n  }\n\n  render() {\n    // override in child class\n    return null;\n  }\n\n}\n\nexport default ContactTemplate;","map":{"version":3,"sources":["/mnt/c/Users/antho/Desktop/Graham-drywall/components/ContactTemplate.js"],"names":["React","EmailValidator","PhoneValidator","postContactForm","ContactTemplate","Component","FieldNames","constructor","props","e","target","classList","add","name","value","setState","validate","state","email","result","phone","length","fieldName","bool","fieldsToValidate","errors","forEach","isValid","push","setError","missingFieldNames","filledFieldNames","isMissingFields","apply","validateFields","error","join","preventDefault","inflight","forceUpdate","handleErrors","message","failureMsg","successCallback","res","success","status","failCallback","setTimeout","stateForFields","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport * as EmailValidator from 'email-validator';\nimport PhoneValidator from 'phone';\nimport postContactForm from '../bin/postContactForm';\n\nclass ContactTemplate extends React.Component {\n  static get FieldNames() {\n    return ['name', 'phone', 'email', 'message'];\n  }\n  \n  constructor (props) {\n    super(props);\n\n    // initial state object for form fields\n    const stateForFields = {}\n\n    // fills initial value and error state for fields\n    this.constructor.FieldNames.forEach(fieldName => {\n      stateForFields[fieldName] = '';\n      stateForFields[`${fieldName}Error`] = false;\n    });\n\n    this.state = {\n      ...stateForFields,\n      success: false,\n      error: '',\n      inflight: false,\n    };\n  }\n\n  handleInputOnChange = e => {\n    // add active class so materialize doesn't collapse lable\n    e.target.classList.add('active');\n  \n    const { name, value } = e.target;\n    this.setState({ [name]: value });\n  }\n\n  emailIsValid = () => EmailValidator.validate(this.state.email);\n\n  phoneIsValid = () => {\n    const result = PhoneValidator(this.state.phone, 'USA', true);\n    return result.length > 0;\n  };\n\n  setError = (fieldName, bool) => this.setState({ [`${fieldName}Error`]: bool });\n\n  validateFields = () => {\n    // validates specified fields,\n    const fieldsToValidate = ['email', 'phone'];   \n    \n    // returns array of errors\n    const errors = [];\n\n    // runs validator fieldIsValid for each\n    fieldsToValidate.forEach(fieldName => {\n      const isValid = this[`${fieldName}IsValid`]();\n      if (!isValid) errors.push(`${fieldName} is invalid`);\n      this.setError(fieldName, !isValid);\n    });\n\n    return errors;\n  };\n\n  isMissingFields = () => {\n    // iterates over field names, checks the field has a value in state\n    // if there is no value sets its error state to true\n    // returns true if any field is missing\n    const missingFieldNames = [];\n    const filledFieldNames = [];\n\n    // sort fieldName into missing or filled\n    this.constructor.FieldNames.forEach(fieldName => {\n      (!this.state[fieldName] ? missingFieldNames : filledFieldNames).push(fieldName);\n    });\n\n    // set fieldError to true or false\n    missingFieldNames.forEach(fieldName => this.setError(fieldName, true));\n    filledFieldNames.forEach(fieldName => this.setError(fieldName, false));\n\n    return missingFieldNames.length > 0;\n  }\n\n  handleErrors = () => {\n    // holds errors generated from existence and validation checks\n    const errors = [];\n    \n    const isMissingFields = this.isMissingFields();\n\n    if (isMissingFields) {\n      // add error message if missing any fields\n      errors.push('The highlighted fields are required');\n    } else {\n      // validates fields, add errors for invalid fields\n      errors.push.apply(errors, this.validateFields());\n    }\n\n    // generates the error message from errors and saves it to state for display\n    // as feedback to the user, if none will be empty string\n    this.setState({ error:  errors.join(', ') });\n\n    // if there are any errors, return false\n    return errors.length > 0;\n  }\n\n  getErrorStatus = fieldName => {\n    // helper for getting a fields error state by fieldName\n    return this.state[`${fieldName}Error`];\n  }\n\n  handleSubmit = async e => {\n    // prevent page from refreshing on submit\n    e.preventDefault();\n    \n    // set request status to inflight and force update to disable button\n    await this.setState({ inflight: true });\n    await this.forceUpdate();\n    \n    // Runs only if there are no errors\n    if (!this.handleErrors()) {\n      const {name, phone, email, message} = this.state;\n      const failureMsg = 'Something went wrong. Please give us a call instead';\n      \n      // postContactForm will success or fail callback depending on whether\n      // the request resolves or errors out\n      const successCallback = res => {\n        const success = res.status == 200;\n        this.setState({ success, error: success ? '' : failureMsg });\n      };\n      const failCallback = () => this.setState({ success: false, error: failureMsg });\n  \n      postContactForm({ name, phone, email, message }, successCallback, failCallback);\n    }\n\n    // 3 second delay before enabling button\n    setTimeout(() => this.setState({ inflight: false }), 3000);\n  }\n\n  render() {\n    // override in child class\n    return null;\n  }\n}\n\nexport default ContactTemplate;"]},"metadata":{},"sourceType":"module"}