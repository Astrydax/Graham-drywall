{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as EmailValidator from 'email-validator';\nimport PhoneValidator from 'phone';\nimport postContactForm from '../bin/postContactForm';\n\nvar ContactTemplate = /*#__PURE__*/function (_React$Component) {\n  _inherits(ContactTemplate, _React$Component);\n\n  var _super = _createSuper(ContactTemplate);\n\n  _createClass(ContactTemplate, null, [{\n    key: \"FieldNames\",\n    get: function get() {\n      return ['name', 'phone', 'email', 'message'];\n    }\n  }]);\n\n  function ContactTemplate(props) {\n    var _this;\n\n    _classCallCheck(this, ContactTemplate);\n\n    _this = _super.call(this, props); // initial state object for form fields\n\n    _defineProperty(_assertThisInitialized(_this), \"handleInputOnChange\", function (e) {\n      // add active class so materialize doesn't collapse lable\n      e.target.classList.add('active');\n      var _e$target = e.target,\n          name = _e$target.name,\n          value = _e$target.value;\n\n      _this.setState(_defineProperty({}, name, value));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"emailIsValid\", function () {\n      return EmailValidator.validate(_this.state.email);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"phoneIsValid\", function () {\n      var result = PhoneValidator(_this.state.phone, 'USA', true);\n      return result.length > 0;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setError\", function (fieldName, bool) {\n      return _this.setState(_defineProperty({}, \"\".concat(fieldName, \"Error\"), bool));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"validateFields\", function () {\n      // validates specified fields,\n      var fieldsToValidate = ['email', 'phone']; // returns array of errors\n\n      var errors = []; // runs validator fieldIsValid for each\n\n      fieldsToValidate.forEach(function (fieldName) {\n        var isValid = _this[\"\".concat(fieldName, \"IsValid\")]();\n\n        if (!isValid) errors.push(\"\".concat(fieldName, \" is invalid\"));\n\n        _this.setError(fieldName, !isValid);\n      });\n      return errors;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"isMissingFields\", function () {\n      // iterates over field names, checks the field has a value in state\n      // if there is no value sets its error state to true\n      // returns true if any field is missing\n      var missingFieldNames = [];\n      var filledFieldNames = []; // sort fieldName into missing or filled\n\n      _this.constructor.FieldNames.forEach(function (fieldName) {\n        (!_this.state[fieldName] ? missingFieldNames : filledFieldNames).push(fieldName);\n      }); // set fieldError to true or false\n\n\n      missingFieldNames.forEach(function (fieldName) {\n        return _this.setError(fieldName, true);\n      });\n      filledFieldNames.forEach(function (fieldName) {\n        return _this.setError(fieldName, false);\n      });\n      return missingFieldNames.length > 0;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleErrors\", function () {\n      // holds errors generated from existence and validation checks\n      var errors = [];\n\n      var isMissingFields = _this.isMissingFields();\n\n      if (isMissingFields) {\n        // add error message if missing any fields\n        errors.push('The highlighted fields are required');\n      } else {\n        // validates fields, add errors for invalid fields\n        errors.push.apply(errors, _this.validateFields());\n      } // generates the error message from errors and saves it to state for display\n      // as feedback to the user, if none will be empty string\n\n\n      _this.setState({\n        error: errors.join(', ')\n      }); // if there are any errors, return false\n\n\n      return errors.length > 0;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getErrorStatus\", function (fieldName) {\n      // helper for getting a fields error state by fieldName\n      return _this.state[\"\".concat(fieldName, \"Error\")];\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSubmit\", function _callee(e) {\n      var _this$state, name, phone, email, message, failureMsg, successCallback, failCallback;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // prevent page from refreshing on submit\n              e.preventDefault(); // set request status to inflight and force update to disable button\n\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(_this.setState({\n                inflight: true\n              }));\n\n            case 3:\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(_this.forceUpdate());\n\n            case 5:\n              // Runs only if there are no errors\n              if (!_this.handleErrors()) {\n                _this$state = _this.state, name = _this$state.name, phone = _this$state.phone, email = _this$state.email, message = _this$state.message;\n                failureMsg = 'Something went wrong. Please give us a call instead'; // postContactForm will success or fail callback depending on whether\n                // the request resolves or errors out\n\n                successCallback = function successCallback(res) {\n                  var success = res.status == 200;\n\n                  _this.setState({\n                    success: success,\n                    error: success ? '' : failureMsg\n                  });\n                };\n\n                failCallback = function failCallback() {\n                  return _this.setState({\n                    success: false,\n                    error: failureMsg\n                  });\n                };\n\n                postContactForm({\n                  name: name,\n                  phone: phone,\n                  email: email,\n                  message: message\n                }, successCallback, failCallback);\n              } // 3 second delay before enabling button\n\n\n              setTimeout(function () {\n                return _this.setState({\n                  inflight: false\n                });\n              }, 3000);\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    });\n\n    var stateForFields = {}; // fills initial value and error state for fields\n\n    _this.constructor.FieldNames.forEach(function (fieldName) {\n      stateForFields[fieldName] = '';\n      stateForFields[\"\".concat(fieldName, \"Error\")] = false;\n    });\n\n    _this.state = _objectSpread({}, stateForFields, {\n      success: false,\n      error: '',\n      inflight: false\n    });\n    return _this;\n  }\n\n  _createClass(ContactTemplate, [{\n    key: \"render\",\n    value: function render() {\n      // override in child class\n      return null;\n    }\n  }]);\n\n  return ContactTemplate;\n}(React.Component);\n\nexport default ContactTemplate;","map":{"version":3,"sources":["/mnt/c/Users/antho/Desktop/Graham-drywall/components/ContactTemplate.js"],"names":["EmailValidator","PhoneValidator","postContactForm","ContactTemplate","props","e","target","classList","add","name","value","setState","validate","state","email","result","phone","length","fieldName","bool","fieldsToValidate","errors","forEach","isValid","push","setError","missingFieldNames","filledFieldNames","constructor","FieldNames","isMissingFields","apply","validateFields","error","join","preventDefault","inflight","forceUpdate","handleErrors","message","failureMsg","successCallback","res","success","status","failCallback","setTimeout","stateForFields","React","Component"],"mappings":"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","sourcesContent":["import * as EmailValidator from 'email-validator';\nimport PhoneValidator from 'phone';\nimport postContactForm from '../bin/postContactForm';\n\nclass ContactTemplate extends React.Component {\n  static get FieldNames() {\n    return ['name', 'phone', 'email', 'message'];\n  }\n  \n  constructor (props) {\n    super(props);\n\n    // initial state object for form fields\n    const stateForFields = {}\n\n    // fills initial value and error state for fields\n    this.constructor.FieldNames.forEach(fieldName => {\n      stateForFields[fieldName] = '';\n      stateForFields[`${fieldName}Error`] = false;\n    });\n\n    this.state = {\n      ...stateForFields,\n      success: false,\n      error: '',\n      inflight: false,\n    };\n  }\n\n  handleInputOnChange = e => {\n    // add active class so materialize doesn't collapse lable\n    e.target.classList.add('active');\n  \n    const { name, value } = e.target;\n    this.setState({ [name]: value });\n  }\n\n  emailIsValid = () => EmailValidator.validate(this.state.email);\n\n  phoneIsValid = () => {\n    const result = PhoneValidator(this.state.phone, 'USA', true);\n    return result.length > 0;\n  };\n\n  setError = (fieldName, bool) => this.setState({ [`${fieldName}Error`]: bool });\n\n  validateFields = () => {\n    // validates specified fields,\n    const fieldsToValidate = ['email', 'phone'];   \n    \n    // returns array of errors\n    const errors = [];\n\n    // runs validator fieldIsValid for each\n    fieldsToValidate.forEach(fieldName => {\n      const isValid = this[`${fieldName}IsValid`]();\n      if (!isValid) errors.push(`${fieldName} is invalid`);\n      this.setError(fieldName, !isValid);\n    });\n\n    return errors;\n  };\n\n  isMissingFields = () => {\n    // iterates over field names, checks the field has a value in state\n    // if there is no value sets its error state to true\n    // returns true if any field is missing\n    const missingFieldNames = [];\n    const filledFieldNames = [];\n\n    // sort fieldName into missing or filled\n    this.constructor.FieldNames.forEach(fieldName => {\n      (!this.state[fieldName] ? missingFieldNames : filledFieldNames).push(fieldName);\n    });\n\n    // set fieldError to true or false\n    missingFieldNames.forEach(fieldName => this.setError(fieldName, true));\n    filledFieldNames.forEach(fieldName => this.setError(fieldName, false));\n\n    return missingFieldNames.length > 0;\n  }\n\n  handleErrors = () => {\n    // holds errors generated from existence and validation checks\n    const errors = [];\n    \n    const isMissingFields = this.isMissingFields();\n\n    if (isMissingFields) {\n      // add error message if missing any fields\n      errors.push('The highlighted fields are required');\n    } else {\n      // validates fields, add errors for invalid fields\n      errors.push.apply(errors, this.validateFields());\n    }\n\n    // generates the error message from errors and saves it to state for display\n    // as feedback to the user, if none will be empty string\n    this.setState({ error:  errors.join(', ') });\n\n    // if there are any errors, return false\n    return errors.length > 0;\n  }\n\n  getErrorStatus = fieldName => {\n    // helper for getting a fields error state by fieldName\n    return this.state[`${fieldName}Error`];\n  }\n\n  handleSubmit = async e => {\n    // prevent page from refreshing on submit\n    e.preventDefault();\n    \n    // set request status to inflight and force update to disable button\n    await this.setState({ inflight: true });\n    await this.forceUpdate();\n    \n    // Runs only if there are no errors\n    if (!this.handleErrors()) {\n      const {name, phone, email, message} = this.state;\n      const failureMsg = 'Something went wrong. Please give us a call instead';\n      \n      // postContactForm will success or fail callback depending on whether\n      // the request resolves or errors out\n      const successCallback = res => {\n        const success = res.status == 200;\n        this.setState({ success, error: success ? '' : failureMsg });\n      };\n      const failCallback = () => this.setState({ success: false, error: failureMsg });\n  \n      postContactForm({ name, phone, email, message }, successCallback, failCallback);\n    }\n\n    // 3 second delay before enabling button\n    setTimeout(() => this.setState({ inflight: false }), 3000);\n  }\n\n  render() {\n    // override in child class\n    return null;\n  }\n}\n\nexport default ContactTemplate;"]},"metadata":{},"sourceType":"module"}